# Name of your application. Used to uniquely configure containers.
service: kaikei

# Name of the container image.
image: yokonao/kaikei

# Deploy to these servers.
servers:
  web:
    - 162.43.20.107

ssh:
  user: debian

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
proxy:
  ssl: true
  host: kaikei.yokonao.xyz

# Credentials for your image host.
registry:
  server: localhost:50000
  username: dummy
  password: dummy

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    RAILS_LOG_LEVEL: warn
    SOLID_QUEUE_IN_PUMA: true

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

volumes:
  - "kaikei_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

logging:
  driver: journald
  options:
    labels: destination,role,service
